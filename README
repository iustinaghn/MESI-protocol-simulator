MESI PROTOCOL SIMULATOR

Implemented in python3.8, MESI Protocol Simulator for 4 processors.

Check python version cmd Linux: "python --version" or "python3 --version"

Run program: "python3 mesi.py"

Mesi class can be seen as the chip that contains all of the Processors, Bus, and Memory.

Mesi.instruction() => Performs the specified request in the cache.
Mesi.random_test() => Performs a random test on the MESI simulator.

Processor class handles its operations and cache.

Processor.pr_rd() => Reads a cache block. => If we're in the invalid state =>  Issue BusRd to the bus
									     other Caches see BusRd and check if they have a non-invalid copy, inform sending cache
									     State transition to (S)Shared, if other Caches have non-invalid copy.
									     State transition to (E)Exclusive, if none (must ensure all others have reported).
									     If other Caches have copy, one of them sends value, else fetch from Main Memory
					 => Modified, Shared, and Exclusive states => We already have a valid copy of the information.
										     No bus transactions generated
										     State remains the same.
										     Read to the block is a Cache hit
								
Processor.pr_wr() => Writes to a cache block. => Invalid state =>  Issue BusRdX signal on the bus
								  State transition to (M)Modified in the requestor Cache.
								  If other Caches have copy, they send value, otherwise fetch from Main Memory
								  If other Caches have copy, they see BusRdX signal and Invalidate their copies.
								  Write into Cache block modifies the value.
					     => Shared state => Bus upgrade
			*Change state to Modified.
			
Processor.snooper() => Snoops on the bus for changes in the cache. => If is not issued by self => If last transaction is bus_rd => If state is Exclusive => Transition to Shared (Since it implies a read taking place in other cache).
                    																	Put FlushOpt on bus together with contents of block.
                    													     => If state is Shared => No State change (other cache performed read on this block, so still shared).
																		     May put FlushOpt on bus together with contents of block
																		     (design choice, which cache with Shared state does this).
															     => If state is Modified => Transition to (S)Shared.
																		       Put FlushOpt on Bus with data. Received by sender of BusRd and Memory Controller,
																		       which writes to Main memory.
											    => If last transaction is bus_rd_x => If state is not Invalid => If we had a valid copy of the data (E,M,S)
																			    Transition to Invalid.
																			    Put FlushOpt on Bus, together with the data from now-invalidated block.
											    => If last transaction is bus_upgr => If state is Shared => Transition to Invalid.
											    
Bus class simulates an inter-core bus on a multi-processor chip.

Bus.status() => Gets the current state of all of the processor's caches.
Bus.transaction() => Performs the specified bus transaction and appends it to the history.
Bus.bus_rd() => Snooped request that indicates there is a read request to a Cache block made by another processor.
Bus.bus_rd_x() => Snooped request that indicates there is a write request to a Cache block made by another processor which doesn't already have the block.
Bus.bus_upgr() => Snooped request that indicates that there is a write request to a Cache block made by another processor but that processor already has that Cache block resident in its Cache.
Bus.flush() => Snooped request that indicates that an entire cache block is written back to the main memory by another processor.
Bus.flush_opt() => Snooped request that indicates that an entire cache block is posted on the bus in order to supply it to another processor (Cache to Cache transfers).
Bus.processor_snooping() => Has all processors perform their snooping and respond appropripyately.

Memory class simulates shared memory block for MESI simulator.
